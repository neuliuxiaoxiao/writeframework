/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package util.dtothrift;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

    private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("str", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new UserStandardSchemeFactory());
        schemes.put(TupleScheme.class, new UserTupleSchemeFactory());
    }

    public String str; // required
    public int age; // required
    public String address; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        STR((short)1, "str"),
        AGE((short)2, "age"),
        ADDRESS((short)3, "address");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // STR
                    return STR;
                case 2: // AGE
                    return AGE;
                case 3: // ADDRESS
                    return ADDRESS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __AGE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.STR, new org.apache.thrift.meta_data.FieldMetaData("str", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
    }

    public User() {
    }

    public User(
            String str,
            int age,
            String address)
    {
        this();
        this.str = str;
        this.age = age;
        setAgeIsSet(true);
        this.address = address;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public User(User other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetStr()) {
            this.str = other.str;
        }
        this.age = other.age;
        if (other.isSetAddress()) {
            this.address = other.address;
        }
    }

    public User deepCopy() {
        return new User(this);
    }

    @Override
    public void clear() {
        this.str = null;
        setAgeIsSet(false);
        this.age = 0;
        this.address = null;
    }

    public String getStr() {
        return this.str;
    }

    public User setStr(String str) {
        this.str = str;
        return this;
    }

    public void unsetStr() {
        this.str = null;
    }

    /** Returns true if field str is set (has been assigned a value) and false otherwise */
    public boolean isSetStr() {
        return this.str != null;
    }

    public void setStrIsSet(boolean value) {
        if (!value) {
            this.str = null;
        }
    }

    public int getAge() {
        return this.age;
    }

    public User setAge(int age) {
        this.age = age;
        setAgeIsSet(true);
        return this;
    }

    public void unsetAge() {
        __isset_bit_vector.clear(__AGE_ISSET_ID);
    }

    /** Returns true if field age is set (has been assigned a value) and false otherwise */
    public boolean isSetAge() {
        return __isset_bit_vector.get(__AGE_ISSET_ID);
    }

    public void setAgeIsSet(boolean value) {
        __isset_bit_vector.set(__AGE_ISSET_ID, value);
    }

    public String getAddress() {
        return this.address;
    }

    public User setAddress(String address) {
        this.address = address;
        return this;
    }

    public void unsetAddress() {
        this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
        return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
        if (!value) {
            this.address = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case STR:
                if (value == null) {
                    unsetStr();
                } else {
                    setStr((String)value);
                }
                break;

            case AGE:
                if (value == null) {
                    unsetAge();
                } else {
                    setAge((Integer)value);
                }
                break;

            case ADDRESS:
                if (value == null) {
                    unsetAddress();
                } else {
                    setAddress((String)value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case STR:
                return getStr();

            case AGE:
                return Integer.valueOf(getAge());

            case ADDRESS:
                return getAddress();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case STR:
                return isSetStr();
            case AGE:
                return isSetAge();
            case ADDRESS:
                return isSetAddress();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof User)
            return this.equals((User)that);
        return false;
    }

    public boolean equals(User that) {
        if (that == null)
            return false;

        boolean this_present_str = true && this.isSetStr();
        boolean that_present_str = true && that.isSetStr();
        if (this_present_str || that_present_str) {
            if (!(this_present_str && that_present_str))
                return false;
            if (!this.str.equals(that.str))
                return false;
        }

        boolean this_present_age = true;
        boolean that_present_age = true;
        if (this_present_age || that_present_age) {
            if (!(this_present_age && that_present_age))
                return false;
            if (this.age != that.age)
                return false;
        }

        boolean this_present_address = true && this.isSetAddress();
        boolean that_present_address = true && that.isSetAddress();
        if (this_present_address || that_present_address) {
            if (!(this_present_address && that_present_address))
                return false;
            if (!this.address.equals(that.address))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(User other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        User typedOther = (User)other;

        lastComparison = Boolean.valueOf(isSetStr()).compareTo(typedOther.isSetStr());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStr()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str, typedOther.str);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAge()).compareTo(typedOther.isSetAge());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAge()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, typedOther.age);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAddress()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, typedOther.address);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("User(");
        boolean first = true;

        sb.append("str:");
        if (this.str == null) {
            sb.append("null");
        } else {
            sb.append(this.str);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("age:");
        sb.append(this.age);
        first = false;
        if (!first) sb.append(", ");
        sb.append("address:");
        if (this.address == null) {
            sb.append("null");
        } else {
            sb.append(this.address);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bit_vector = new BitSet(1);
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class UserStandardSchemeFactory implements SchemeFactory {
        public UserStandardScheme getScheme() {
            return new UserStandardScheme();
        }
    }

    private static class UserStandardScheme extends StandardScheme<User> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // STR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.str = iprot.readString();
                            struct.setStrIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // AGE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.age = iprot.readI32();
                            struct.setAgeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // ADDRESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.address = iprot.readString();
                            struct.setAddressIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.str != null) {
                oprot.writeFieldBegin(STR_FIELD_DESC);
                oprot.writeString(struct.str);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(AGE_FIELD_DESC);
            oprot.writeI32(struct.age);
            oprot.writeFieldEnd();
            if (struct.address != null) {
                oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
                oprot.writeString(struct.address);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class UserTupleSchemeFactory implements SchemeFactory {
        public UserTupleScheme getScheme() {
            return new UserTupleScheme();
        }
    }

    private static class UserTupleScheme extends TupleScheme<User> {

        public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetStr()) {
                optionals.set(0);
            }
            if (struct.isSetAge()) {
                optionals.set(1);
            }
            if (struct.isSetAddress()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetStr()) {
                oprot.writeString(struct.str);
            }
            if (struct.isSetAge()) {
                oprot.writeI32(struct.age);
            }
            if (struct.isSetAddress()) {
                oprot.writeString(struct.address);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.str = iprot.readString();
                struct.setStrIsSet(true);
            }
            if (incoming.get(1)) {
                struct.age = iprot.readI32();
                struct.setAgeIsSet(true);
            }
            if (incoming.get(2)) {
                struct.address = iprot.readString();
                struct.setAddressIsSet(true);
            }
        }
    }

}